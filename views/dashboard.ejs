<%- include('layouts/boilerplate.ejs') %>

<head>
  <style>
    :root {
      --primary: #000000;
      --primary-dark: #1a1a1a;
      --secondary: #2a2a2a;
      --accent: #404040;
      --text-primary: #000000;
      --text-secondary: #666666;
      --bg-light: #f5f5f5;
      --border: #e0e0e0;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Plus Jakarta Sans', sans-serif;
      background: linear-gradient(135deg, #000000 0%, #1a1a1a 100%);
      color: var(--text-primary);
      min-height: 100vh;
      padding: 40px 20px;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.98);
      border-radius: 24px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      padding: 48px;
      position: relative;
    }

    .dashboard-header {
      margin-bottom: 40px;
      padding-bottom: 32px;
      border-bottom: 2px solid var(--border);
    }

    h1 {
      color: var(--primary);
      margin-bottom: 8px;
      font-size: 2.5rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .header-icon {
      width: 56px;
      height: 56px;
      background: linear-gradient(135deg, #000000 0%, #2a2a2a 100%);
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.5rem;
    }

    .subtitle {
      color: var(--text-secondary);
      font-size: 1rem;
      font-weight: 500;
      margin-left: 72px;
    }

    /* Toast Notification */
    .toast-container {
      position: fixed;
      top: 24px;
      right: 24px;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }

    .toast {
      background: white;
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 16px 20px;
      min-width: 320px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 12px;
      animation: slideInRight 0.3s ease;
      position: relative;
    }

    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    @keyframes slideOutRight {
      to {
        opacity: 0;
        transform: translateX(100px);
      }
    }

    .toast.hiding {
      animation: slideOutRight 0.3s ease;
    }

    .toast-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      flex-shrink: 0;
    }

    .toast-success .toast-icon {
      background: #f0f0f0;
      color: var(--text-primary);
    }

    .toast-error .toast-icon {
      background: #f0f0f0;
      color: var(--text-primary);
    }

    .toast-content {
      flex: 1;
      color: var(--text-primary);
      font-size: 14px;
      font-weight: 500;
    }

    .toast-close {
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
      transition: all 0.2s;
    }

    .toast-close:hover {
      background: #f5f5f5;
      color: var(--text-primary);
    }

    /* Legacy alert for server-side messages */
    .alert {
      padding: 16px 24px;
      border-radius: 12px;
      margin-bottom: 24px;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
      border: 1px solid var(--border);
      color: var(--text-primary);
      animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .alert-success, .alert-error {
      background: white;
      border: 1px solid var(--border);
    }

    .alert i {
      font-size: 18px;
    }

    .table-wrapper {
      background: white;
      border-radius: 16px;
      overflow: hidden;
      border: 1px solid var(--border);
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    thead {
      background: linear-gradient(135deg, #000000 0%, #2a2a2a 100%);
    }

    th {
      padding: 20px 16px;
      text-align: left;
      font-weight: 600;
      font-size: 13px;
      text-transform: uppercase;
      letter-spacing: 1px;
      color: #ffffff;
    }

    td {
      padding: 20px 16px;
      border-bottom: 1px solid var(--border);
      color: var(--text-primary);
      font-size: 14px;
      vertical-align: middle;
    }

    tbody tr {
      transition: all 0.2s ease;
    }

    tbody tr:hover {
      background: rgba(0, 0, 0, 0.02);
    }

    tbody tr:last-child td {
      border-bottom: none;
    }

    /* Status badges */
    .status-badge {
      display: inline-block;
      padding: 6px 16px;
      border-radius: 20px;
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .status-authentic {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .status-suspicious {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }

    .status-fake {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .status-approved {
      background: #cce5ff;
      color: #004085;
      border: 1px solid #b8daff;
    }

    .status-rejected {
      background: #f5c6cb;
      color: #721c24;
      border: 1px solid #f1b0b7;
    }

    .status-pending {
      background: #e2e3e5;
      color: #383d41;
      border: 1px solid #d6d8db;
    }

    /* Score display */
    .score-display {
      font-weight: 700;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .score-high {
      color: #28a745;
    }

    .score-medium {
      color: #ffc107;
    }

    .score-low {
      color: #dc3545;
    }

    /* Action buttons */
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 13px;
      font-weight: 600;
      transition: all 0.3s ease;
      margin-right: 8px;
      display: inline-block;
    }

    .btn-verify {
      background: #f5f5f5;
      color: var(--text-primary);
      border: 1px solid var(--border);
    }

    .btn-verify:hover {
      background: #e8e8e8;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .btn-approve {
      background: #f5f5f5;
      color: var(--text-primary);
      border: 1px solid var(--border);
    }

    .btn-approve:hover {
      background: #e8e8e8;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .btn-reject {
      background: #f5f5f5;
      color: var(--text-primary);
      border: 1px solid var(--border);
    }

    .btn-reject:hover {
      background: #e8e8e8;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }

    .btn-link {
      color: var(--primary);
      text-decoration: none;
      font-weight: 600;
      transition: all 0.2s;
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }

    .btn-link:hover {
      color: var(--secondary);
      text-decoration: underline;
    }

    /* Loading spinner */
    .spinner {
      display: inline-block;
      width: 14px;
      height: 14px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 0.8s linear infinite;
      margin-left: 6px;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .no-uploads {
      text-align: center;
      padding: 80px 20px;
      color: var(--text-secondary);
    }

    .no-uploads-icon {
      width: 120px;
      height: 120px;
      background: linear-gradient(135deg, #000000 0%, #2a2a2a 100%);
      border-radius: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 24px;
      color: white;
      font-size: 3rem;
    }

    .no-uploads h3 {
      color: var(--text-primary);
      margin-bottom: 12px;
      font-size: 1.5rem;
    }

    .no-uploads p {
      color: var(--text-secondary);
      font-size: 1rem;
    }

    /* Anomalies tooltip */
    .anomalies-icon {
      cursor: help;
      color: #ffc107;
      font-size: 18px;
      margin-left: 8px;
    }

    .tooltip {
      position: relative;
      display: inline-block;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: 300px;
      background-color: #1a1a1a;
      color: #fff;
      text-align: left;
      border-radius: 12px;
      padding: 16px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -150px;
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 12px;
      line-height: 1.6;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }

    .verified-against {
      font-size: 11px;
      color: var(--text-secondary);
      margin-top: 4px;
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .file-name {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 14px;
    }

    .file-meta {
      font-size: 11px;
      color: var(--text-secondary);
      margin-top: 6px;
    }

    .file-type-badge {
      display: inline-block;
      padding: 4px 12px;
      background: rgba(0, 0, 0, 0.05);
      border-radius: 6px;
      font-size: 12px;
      font-weight: 600;
      text-transform: capitalize;
      color: var(--text-secondary);
    }

    @media (max-width: 768px) {
      .container {
        padding: 24px;
      }

      h1 {
        font-size: 1.75rem;
      }

      table {
        font-size: 12px;
      }

      th, td {
        padding: 12px 8px;
      }

      .btn {
        padding: 8px 12px;
        font-size: 11px;
        margin-bottom: 6px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="dashboard-header">
      <h1>
        <div class="header-icon">
          <i class="fas fa-shield-check"></i>
        </div>
        VeriDocs AI Dashboard
      </h1>
      <p class="subtitle">Document & Media Verification System</p>
    </div>

    <% if (success_msg) { %>
      <div class="alert alert-success">
        <i class="fas fa-check-circle"></i>
        <%= success_msg %>
      </div>
    <% } %>

    <% if (error_msg) { %>
      <div class="alert alert-error">
        <i class="fas fa-exclamation-circle"></i>
        <%= error_msg %>
      </div>
    <% } %>

    <% if (uploads.length === 0) { %>
      <div class="no-uploads">
        <div class="no-uploads-icon">
          <i class="fas fa-file-alt"></i>
        </div>
        <h3>No uploads yet</h3>
        <p>Upload your first document or media file to start verification</p>
      </div>
    <% } else { %>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>File Name</th>
              <th>Type</th>
              <th>Status</th>
              <th>Authenticity Score</th>
              <th>Verified Against</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% uploads.forEach(upload => { %>
              <tr id="row-<%= upload._id %>">
                <td>
                  <div class="file-name"><%= upload.fileName %></div>
                  <div class="file-meta">
                    <%= new Date(upload.createdAt).toLocaleDateString() %> 
                    <%= new Date(upload.createdAt).toLocaleTimeString() %>
                  </div>
                </td>
                
                <td>
                  <span class="file-type-badge">
                    <%= upload.fileType %>
                  </span>
                </td>
                
                <td class="status">
                  <% 
                    const status = upload.result ? upload.result.status : "pending";
                    const statusClass = `status-${status}`;
                  %>
                  <span class="status-badge <%= statusClass %>">
                    <%= status %>
                  </span>
                  
                  <% if (upload.result && upload.result.anomalies && upload.result.anomalies.length > 0) { %>
                    <div class="tooltip">
                      <span class="anomalies-icon">⚠️</span>
                      <span class="tooltiptext">
                        <strong>Anomalies Detected:</strong><br>
                        <% upload.result.anomalies.forEach(anomaly => { %>
                          • <%= anomaly %><br>
                        <% }) %>
                      </span>
                    </div>
                  <% } %>
                </td>
                
                <td class="score">
                  <% 
                    const score = upload.result ? upload.result.authenticityScore : null;
                    let scoreClass = '';
                    if (score !== null && score !== undefined) {
                      if (score >= 70) scoreClass = 'score-high';
                      else if (score >= 40) scoreClass = 'score-medium';
                      else scoreClass = 'score-low';
                    }
                  %>
                  <div class="score-display <%= scoreClass %>">
                    <% if (score !== null && score !== undefined) { %>
                      <%= Math.round(score) %>/100
                    <% } else { %>
                      N/A
                    <% } %>
                  </div>
                </td>

                <td class="verified-info">
                  <% if (upload.result && upload.result.verifiedAgainst && upload.result.verifiedAgainst.length > 0) { %>
                    <% upload.result.verifiedAgainst.slice(0, 2).forEach(method => { %>
                      <div class="verified-against">
                        <i class="fas fa-check-circle"></i>
                        <%= method %>
                      </div>
                    <% }) %>
                    <% if (upload.result.verifiedAgainst.length > 2) { %>
                      <div class="verified-against">+ <%= upload.result.verifiedAgainst.length - 2 %> more</div>
                    <% } %>
                  <% } else { %>
                    <span style="color: #95a5a6;">Not verified</span>
                  <% } %>
                </td>
                
                <td>
                  <% if (upload.fileUrl) { %>
                    <a href="<%= upload.fileUrl %>" target="_blank" class="btn-link">
                      <i class="fas fa-eye"></i> View
                    </a>
                    <br><br>
                  <% } %>
                  <button class="btn btn-verify" onclick="verifyDoc('<%= upload._id %>')" id="verify-<%= upload._id %>">
                    <i class="fas fa-check"></i> Verify
                  </button>
                  <button class="btn btn-approve" onclick="approveDoc('<%= upload._id %>')">
                    <i class="fas fa-thumbs-up"></i> Approve
                  </button>
                  <button class="btn btn-reject" onclick="rejectDoc('<%= upload._id %>')">
                    <i class="fas fa-thumbs-down"></i> Reject
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } %>
  </div>

  <script>
    async function verifyDoc(id) {
      const btn = document.getElementById(`verify-${id}`);
      const originalText = btn.innerHTML;
      
      btn.disabled = true;
      btn.innerHTML = 'Verifying<span class="spinner"></span>';
      
      try {
        const res = await fetch(`/api/verify/${id}`, { method: "POST" });
        const data = await res.json();
        
        if (data.success) {
          updateRow(id, data.result);
          showNotification('Verification complete!', 'success');
        } else {
          showNotification('Verification failed: ' + (data.error || 'Unknown error'), 'error');
        }
      } catch (error) {
        showNotification('Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
      }
    }

    async function approveDoc(id) {
      if (!confirm('Are you sure you want to approve this document?')) return;
      
      try {
        const res = await fetch(`/api/approve/${id}`, { method: "POST" });
        const data = await res.json();
        
        if (data.success) {
          updateRow(id, data.result);
          showNotification('Document approved successfully!', 'success');
        }
      } catch (error) {
        showNotification('Approval failed: ' + error.message, 'error');
      }
    }

    async function rejectDoc(id) {
      if (!confirm('Are you sure you want to reject this document?')) return;
      
      try {
        const res = await fetch(`/api/reject/${id}`, { method: "POST" });
        const data = await res.json();
        
        if (data.success) {
          updateRow(id, data.result);
          showNotification('Document rejected successfully!', 'success');
        }
      } catch (error) {
        showNotification('Rejection failed: ' + error.message, 'error');
      }
    }

    function updateRow(id, result) {
      const row = document.getElementById(`row-${id}`);
      
      const statusCell = row.querySelector(".status");
      const status = result.status || 'pending';
      statusCell.innerHTML = `<span class="status-badge status-${status}">${status}</span>`;
      
      if (result.anomalies && result.anomalies.length > 0) {
        const tooltipHtml = `
          <div class="tooltip">
            <span class="anomalies-icon">⚠️</span>
            <span class="tooltiptext">
              <strong>Anomalies Detected:</strong><br>
              ${result.anomalies.map(a => `• ${a}`).join('<br>')}
            </span>
          </div>
        `;
        statusCell.innerHTML += tooltipHtml;
      }
      
      const scoreCell = row.querySelector(".score");
      const score = result.authenticityScore;
      let scoreClass = '';
      if (score !== null && score !== undefined) {
        if (score >= 70) scoreClass = 'score-high';
        else if (score >= 40) scoreClass = 'score-medium';
        else scoreClass = 'score-low';
        scoreCell.innerHTML = `<div class="score-display ${scoreClass}">${Math.round(score)}/100</div>`;
      } else {
        scoreCell.innerHTML = '<div class="score-display">N/A</div>';
      }
      
      const verifiedCell = row.querySelector(".verified-info");
      if (result.verifiedAgainst && result.verifiedAgainst.length > 0) {
        let html = '';
        result.verifiedAgainst.slice(0, 2).forEach(method => {
          html += `<div class="verified-against"><i class="fas fa-check-circle"></i> ${method}</div>`;
        });
        if (result.verifiedAgainst.length > 2) {
          html += `<div class="verified-against">+ ${result.verifiedAgainst.length - 2} more</div>`;
        }
        verifiedCell.innerHTML = html;
      }
    }

    function showNotification(message, type) {
      // Create toast container if it doesn't exist
      let toastContainer = document.querySelector('.toast-container');
      if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container';
        document.body.appendChild(toastContainer);
      }

      // Create toast
      const toast = document.createElement('div');
      toast.className = `toast toast-${type}`;
      
      const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
      
      toast.innerHTML = `
        <div class="toast-icon">
          <i class="fas ${icon}"></i>
        </div>
        <div class="toast-content">${message}</div>
        <button class="toast-close" onclick="this.parentElement.remove()">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      toastContainer.appendChild(toast);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        toast.classList.add('hiding');
        setTimeout(() => toast.remove(), 300);
      }, 5000);
    }
  </script>
</body>
</html>