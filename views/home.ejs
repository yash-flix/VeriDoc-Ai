
<%- include('layouts/boilerplate.ejs') %>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Plus Jakarta Sans', sans-serif;
            color: #000000;
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* Hero Section with WebGL Background */
        .hero-section {
            position: relative;
            min-height: 100vh;
            display: flex;
            align-items: center;
            overflow: hidden;
            background: linear-gradient(135deg, #000000 0%, #1a1a1a 100%);
        }

        #threads-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .hero-content {
            position: relative;
            z-index: 10;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 24px;
            text-align: center;
        }

        .hero-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 8px 20px;
            border-radius: 50px;
            color: #cccccc;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 24px;
            backdrop-filter: blur(10px);
        }

        .hero-title {
            font-size: clamp(2.5rem, 7vw, 4.5rem);
            font-weight: 700;
            color: #ffffff;
            line-height: 1.2;
            margin-bottom: 24px;
        }

        .gradient-text {
            background: linear-gradient(135deg, #ffffff 0%, #999999 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .hero-subtitle {
            font-size: clamp(1rem, 2vw, 1.25rem);
            color: #b3b3b3;
            margin-bottom: 48px;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.7;
        }

        .cta-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            justify-content: center;
            margin-bottom: 64px;
        }

        .btn-primary {
            background: #ffffff;
            color: #000000;
            padding: 16px 32px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 16px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .btn-primary:hover {
            background: #e5e5e5;
            transform: translateY(-2px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #ffffff;
            padding: 16px 32px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .hero-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 32px;
            max-width: 700px;
            margin: 0 auto;
        }
        a{
            text-decoration: none;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 14px;
            color: #999999;
        }

        .scroll-indicator {
            position: absolute;
            bottom: 32px;
            left: 50%;
            transform: translateX(-50%);
            width: 24px;
            height: 40px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            display: flex;
            align-items: flex-start;
            justify-content: center;
            padding: 8px;
            animation: bounce 2s infinite;
        }

        .scroll-dot {
            width: 6px;
            height: 6px;
            background: #ffffff;
            border-radius: 50%;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0) translateX(-50%); }
            40% { transform: translateY(-10px) translateX(-50%); }
            60% { transform: translateY(-5px) translateX(-50%); }
        }

        /* Detection Section */
        .detection-section {
            padding: 120px 24px;
            background: #ffffff;
        }

        .section-header {
            text-align: center;
            margin-bottom: 64px;
        }

        .section-title {
            font-size: clamp(2rem, 5vw, 3rem);
            font-weight: 700;
            color: #000000;
            margin-bottom: 16px;
        }

        .section-subtitle {
            font-size: clamp(1rem, 2vw, 1.25rem);
            color: #666666;
            max-width: 700px;
            margin: 0 auto;
        }

        .detection-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 32px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .detection-card {
            background: #f5f5f5;
            border: 1px solid #e0e0e0;
            border-radius: 24px;
            padding: 40px 32px;
            transition: all 0.3s ease;
        }

        .detection-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            border-color: #000000;
        }

        .detection-icon {
            width: 64px;
            height: 64px;
            background: linear-gradient(135deg, #000000 0%, #404040 100%);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 24px;
            font-size: 32px;
            color: #ffffff;
        }

        .detection-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #000000;
            margin-bottom: 16px;
        }

        .detection-desc {
            color: #666666;
            line-height: 1.7;
            margin-bottom: 20px;
        }

        .detection-list {
            list-style: none;
        }

        .detection-list li {
            display: flex;
            align-items: flex-start;
            gap: 8px;
            font-size: 14px;
            color: #666666;
            margin-bottom: 12px;
        }

        .detection-list li::before {
            content: "✓";
            color: #000000;
            font-weight: 700;
            flex-shrink: 0;
        }

        /* How It Works Section */
        .how-section {
            padding: 120px 24px;
            background: #f5f5f5;
        }

        .how-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 48px;
            max-width: 1000px;
            margin: 0 auto;
        }

        .how-item {
            text-align: center;
        }

        .how-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #000000 0%, #404040 100%);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 24px;
            font-size: 40px;
            color: #ffffff;
        }

        .how-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #000000;
            margin-bottom: 12px;
        }

        .how-desc {
            color: #666666;
            line-height: 1.7;
        }

        /* Use Cases Section */
        .usecases-section {
            padding: 120px 24px;
            background: #ffffff;
        }

        .usecases-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .usecase-card {
            background: #f5f5f5;
            border: 1px solid #e0e0e0;
            border-radius: 16px;
            padding: 32px 24px;
            transition: all 0.3s ease;
        }

        .usecase-card:hover {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        }

        .usecase-icon {
            font-size: 32px;
            margin-bottom: 16px;
        }

        .usecase-title {
            font-size: 1.125rem;
            font-weight: 700;
            color: #000000;
            margin-bottom: 8px;
        }

        .usecase-desc {
            font-size: 14px;
            color: #666666;
        }

        /* CTA Section */
        .cta-section {
            padding: 120px 24px;
            background: linear-gradient(135deg, #000000 0%, #2a2a2a 100%);
            text-align: center;
        }

        .cta-section .section-title {
            color: #ffffff;
        }

        .cta-section .section-subtitle {
            color: #cccccc;
            margin-bottom: 40px;
        }

        /* Footer */
        footer {
            background: #000000;
            border-top: 1px solid #333333;
            padding: 48px 24px;
            text-align: center;
        }

        .footer-brand {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-bottom: 16px;
        }

        .footer-logo {
            font-size: 24px;
        }

        .footer-name {
            font-size: 1.25rem;
            font-weight: 700;
            color: #ffffff;
        }

        .footer-desc {
            color: #999999;
            font-size: 14px;
        }

        @media (max-width: 768px) {
            .hero-stats {
                grid-template-columns: 1fr;
                gap: 24px;
            }

            .cta-buttons {
                flex-direction: column;
            }

            .detection-grid,
            .how-grid,
            .usecases-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Hero Section -->
    <section class="hero-section">
        <canvas id="threads-canvas"></canvas>
        
        <div class="hero-content">
            <div class="hero-badge">
                <span>🛡️</span>
                <span>AI-Powered Verification</span>
            </div>
            
            <h1 class="hero-title">
                Verify Documents & Media<br>
                with <span class="gradient-text">AI Intelligence</span>
            </h1>
            
            <p class="hero-subtitle">
                VeriDocs AI is a web platform that empowers students, professionals, journalists, and companies to verify the authenticity of documents, images, and videos in real-time using advanced multimodal AI models.
            </p>

            <div class="cta-buttons">
                <a href="/upload" class="btn-primary">
             Start Verification
              <span>→</span>
              </a>
                <button class="btn-secondary">
                    Learn More
                </button>
            </div>

            <div class="hero-stats">
                <div class="stat-item">
                    <div class="stat-number">99.2%</div>
                    <div class="stat-label">Accuracy</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">&lt;3s</div>
                    <div class="stat-label">Verification Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">4+</div>
                    <div class="stat-label">Media Types</div>
                </div>
            </div>
        </div>

        <div class="scroll-indicator">
            <div class="scroll-dot"></div>
        </div>
    </section>

    <!-- Detection Section -->
    <section class="detection-section">
        <div class="section-header">
            <h2 class="section-title">What VeriDocs AI Detects</h2>
            <p class="section-subtitle">
                Combining multimodal AI with real-world APIs to detect forgeries, deepfakes, and manipulations
            </p>
        </div>

        <div class="detection-grid">
            <div class="detection-card">
                <div class="detection-icon">📄</div>
                <h3 class="detection-title">Fake Documents</h3>
                <p class="detection-desc">
                    Detect altered or forged documents using Visual Document Retrieval and Document Question Answering models.
                </p>
                <ul class="detection-list">
                    <li>Academic certificates verification</li>
                    <li>Resume and transcript validation</li>
                    <li>Invoice and contract authentication</li>
                </ul>
            </div>

            <div class="detection-card">
                <div class="detection-icon">🎥</div>
                <h3 class="detection-title">Deepfake Media</h3>
                <p class="detection-desc">
                    Identify manipulated images and videos using Image-to-Video, Video Classification, and Zero-Shot models.
                </p>
                <ul class="detection-list">
                    <li>Facial manipulation detection</li>
                    <li>Viral media verification</li>
                    <li>Video authenticity scoring</li>
                </ul>
            </div>

            <div class="detection-card">
                <div class="detection-icon">📝</div>
                <h3 class="detection-title">Misleading Text</h3>
                <p class="detection-desc">
                    Detect plagiarized or misleading content using Text Similarity and Text Classification algorithms.
                </p>
                <ul class="detection-list">
                    <li>Plagiarism detection</li>
                    <li>Content authenticity analysis</li>
                    <li>Source verification</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section class="how-section">
        <div class="section-header">
            <h2 class="section-title">How VeriDocs AI Works</h2>
            <p class="section-subtitle">
                Advanced AI detection powered by multiple verification layers
            </p>
        </div>

        <div class="how-grid">
            <div class="how-item">
                <div class="how-icon">🧠</div>
                <h3 class="how-title">AI Analysis</h3>
                <p class="how-desc">
                    Multimodal AI models scan for forgery patterns, deepfake artifacts, and document inconsistencies using state-of-the-art machine learning.
                </p>
            </div>

            <div class="how-item">
                <div class="how-icon">🔍</div>
                <h3 class="how-title">Cross-Verification</h3>
                <p class="how-desc">
                    Compares documents against trusted databases, reverse image searches, and news sources to validate authenticity.
                </p>
            </div>

            <div class="how-item">
                <div class="how-icon">📊</div>
                <h3 class="how-title">Confidence Scoring</h3>
                <p class="how-desc">
                    Receive detailed reports with confidence scores, anomaly detection, and actionable insights for informed decision-making.
                </p>
            </div>
        </div>
    </section>

    <!-- Use Cases Section -->
    <section class="usecases-section">
        <div class="section-header">
            <h2 class="section-title">Who Uses VeriDocs AI</h2>
            <p class="section-subtitle">
                Trusted by professionals across industries
            </p>
        </div>

        <div class="usecases-grid">
            <div class="usecase-card">
                <div class="usecase-icon">👥</div>
                <h4 class="usecase-title">Students</h4>
                <p class="usecase-desc">Verify academic certificates and credentials</p>
            </div>

            <div class="usecase-card">
                <div class="usecase-icon">🛡️</div>
                <h4 class="usecase-title">HR Teams</h4>
                <p class="usecase-desc">Authenticate resumes and transcripts</p>
            </div>

            <div class="usecase-card">
                <div class="usecase-icon">📰</div>
                <h4 class="usecase-title">Journalists</h4>
                <p class="usecase-desc">Confirm viral media authenticity</p>
            </div>

            <div class="usecase-card">
                <div class="usecase-icon">⚡</div>
                <h4 class="usecase-title">Companies</h4>
                <p class="usecase-desc">Validate invoices and contracts</p>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="cta-section">
        <h2 class="section-title">Ready to Verify?</h2>
        <p class="section-subtitle">
            Start detecting forgeries, deepfakes, and manipulations with AI-powered verification
        </p>
        <a href="/upload" class="btn-primary">
            Get Started Now
              <span>→</span>
              </a>
    </section>

    <!-- Footer -->
    <footer>
        <div class="footer-brand">
            <span class="footer-logo">🛡️</span>
            <span class="footer-name">VeriDocs AI</span>
        </div>
        <p class="footer-desc">AI-Powered Document & Media Verification Platform</p>
    </footer>

    <script>
        // WebGL Threads Background
        (function() {
            const canvas = document.getElementById('threads-canvas');
            const gl = canvas.getContext('webgl', { alpha: true, antialias: true });
            
            if (!gl) {
                console.error('WebGL not supported');
                return;
            }

            // Vertex shader
            const vertexShaderSource = `
                attribute vec2 position;
                void main() {
                    gl_Position = vec4(position, 0.0, 1.0);
                }
            `;

            // Fragment shader
            const fragmentShaderSource = `
                precision highp float;
                uniform float iTime;
                uniform vec3 iResolution;
                uniform vec3 uColor;
                uniform float uAmplitude;
                uniform float uDistance;
                uniform vec2 uMouse;

                #define PI 3.1415926538
                const int u_line_count = 40;
                const float u_line_width = 7.0;
                const float u_line_blur = 10.0;

                float Perlin2D(vec2 P) {
                    vec2 Pi = floor(P);
                    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);
                    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);
                    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
                    Pt += vec2(26.0, 161.0).xyxy;
                    Pt *= Pt;
                    Pt = Pt.xzxz * Pt.yyww;
                    vec4 hash_x = fract(Pt * (1.0 / 951.135664));
                    vec4 hash_y = fract(Pt * (1.0 / 642.949883));
                    vec4 grad_x = hash_x - 0.49999;
                    vec4 grad_y = hash_y - 0.49999;
                    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y)
                        * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);
                    grad_results *= 1.4142135623730950;
                    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy
                        * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
                    vec4 blend2 = vec4(blend, vec2(1.0 - blend));
                    return dot(grad_results, blend2.zxzx * blend2.wwyy);
                }

                float pixel(float count, vec2 resolution) {
                    return (1.0 / max(resolution.x, resolution.y)) * count;
                }

                float lineFn(vec2 st, float width, float perc, float offset, vec2 mouse, float time, float amplitude, float distance) {
                    float split_offset = (perc * 0.4);
                    float split_point = 0.1 + split_offset;
                    float amplitude_normal = smoothstep(split_point, 0.7, st.x);
                    float amplitude_strength = 0.5;
                    float finalAmplitude = amplitude_normal * amplitude_strength * amplitude * (1.0 + (mouse.y - 0.5) * 0.2);
                    float time_scaled = time / 10.0 + (mouse.x - 0.5) * 1.0;
                    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;
                    float xnoise = mix(
                        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),
                        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,
                        st.x * 0.3
                    );
                    float y = 0.5 + (perc - 0.5) * distance + xnoise / 2.0 * finalAmplitude;
                    float line_start = smoothstep(y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur), y, st.y);
                    float line_end = smoothstep(y, y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur), st.y);
                    return clamp((line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))), 0.0, 1.0);
                }

                void main() {
                    vec2 uv = gl_FragCoord.xy / iResolution.xy;
                    float line_strength = 1.0;
                    for (int i = 0; i < u_line_count; i++) {
                        float p = float(i) / float(u_line_count);
                        line_strength *= (1.0 - lineFn(uv, u_line_width * pixel(1.0, iResolution.xy) * (1.0 - p), p, (PI * 1.0) * p, uMouse, iTime, uAmplitude, uDistance));
                    }
                    float colorVal = 1.0 - line_strength;
                    gl_FragColor = vec4(uColor * colorVal, colorVal);
                }
            `;

            // Compile shader
            function compileShader(source, type) {
                const shader = gl.createShader(type);
                gl.shaderSource(shader, source);
                gl.compileShader(shader);
                return shader;
            }

            const vertexShader = compileShader(vertexShaderSource, gl.VERTEX_SHADER);
            const fragmentShader = compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);

            const program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.useProgram(program);

            // Create geometry
            const positions = new Float32Array([-1, -1, 3, -1, -1, 3]);
            const buffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);

            const positionLocation = gl.getAttribLocation(program, 'position');
            gl.enableVertexAttribArray(positionLocation);
            gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

            // Get uniform locations
            const iTimeLocation = gl.getUniformLocation(program, 'iTime');
            const iResolutionLocation = gl.getUniformLocation(program, 'iResolution');
            const uColorLocation = gl.getUniformLocation(program, 'uColor');
            const uAmplitudeLocation = gl.getUniformLocation(program, 'uAmplitude');
            const uDistanceLocation = gl.getUniformLocation(program, 'uDistance');
            const uMouseLocation = gl.getUniformLocation(program, 'uMouse');

            gl.clearColor(0, 0, 0, 0);
            gl.enable(gl.BLEND);
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            // Set uniforms
            gl.uniform3f(uColorLocation, 1.0, 1.0, 1.0);
            gl.uniform1f(uAmplitudeLocation, 1.0);
            gl.uniform1f(uDistanceLocation, 0.0);

            let currentMouse = [0.5, 0.5];
            let targetMouse = [0.5, 0.5];

            // Resize
            function resize() {
                canvas.width = canvas.clientWidth;
                canvas.height = canvas.clientHeight;
                gl.viewport(0, 0, canvas.width, canvas.height);
                gl.uniform3f(iResolutionLocation, canvas.width, canvas.height, canvas.width / canvas.height);
            }
            window.addEventListener('resize', resize);
            resize();

            // Mouse interaction
            canvas.addEventListener('mousemove', function(e) {
                const rect = canvas.getBoundingClientRect();
                const x = (e.clientX - rect.left) / rect.width;
                const y = 1.0 - (e.clientY - rect.top) / rect.height;
                targetMouse = [x, y];
            });

            canvas.addEventListener('mouseleave', function() {
                targetMouse = [0.5, 0.5];
            });

            // Animation
            function animate(t) {
                const smoothing = 0.05;
                currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);
                currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);
                gl.uniform2f(uMouseLocation, currentMouse[0], currentMouse[1]);
                gl.uniform1f(iTimeLocation, t * 0.001);
                gl.clear(gl.COLOR_BUFFER_BIT);
                gl.drawArrays(gl.TRIANGLES, 0, 3);
                requestAnimationFrame(animate);
            }
            requestAnimationFrame(animate);
        })();
    </script>
</body>
</html>